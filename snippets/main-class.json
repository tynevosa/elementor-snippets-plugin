{
    "el_main_plugin_class": {
		"prefix": "el_main_plugin_class",
		"body": [
            "final class Elementor_Test_Extension {",
            "",
	            "const VERSION = '${1:Plugin Name}';",
	            "const MINIMUM_ELEMENTOR_VERSION = '${2:Plugin Name};",
	            "const MINIMUM_PHP_VERSION = '${3:Plugin Name};",
            "",
	            "private static $_instance = null;",
	            "public static function instance() {}",
            "",
	            "public function __construct() {}",
	            "public function init() {}",
	            "public function includes() {}",
            "}",
            "Elementor_Test_Extension::instance();"
		],
		"description": "The main plugin class should have basic information about the extensions, to check basic requirements and to load the required files to activate the plugin functionality."
    },
    "el_main_single_instance": {
		"prefix": "el_main_single_instance",
		"body": [
            "final class Elementor_Test_Extension {",
            "",
                "private static $_instance = null;",
            "",
                "public static function instance() {",
            "",
                    "if ( is_null( self::$_instance ) ) {",
                        "self::$_instance = new self();",
                    "}",
                    "return self::$_instance;",
            "",
                "}",
            "",
            "}",
            "Elementor_Test_Extension::instance();"
		],
		"description": "Single Instance. The plugin class should use a singleton design pattern to make sure it loads only once:"
    },
    "el_main_constructor_class": {
		"prefix": "el_main_constructor_class",
		"body": [
            "public function __construct() {",
            "",
                "add_action( 'init', [ $this, 'i18n' ] );",
                "add_action( 'plugins_loaded', [ $this, 'init' ] );",
            "",
            "}",
            "",
            "public function i18n() {",
            "",
                "load_plugin_textdomain( '${1:elementor-test-extension}' );",
            "",
            "}",
            "",
            "public function init() {",
            "",
                "// Plugin logic here...",
                "${2:#code}",
            "",
            "}"
		],
		"description": "The constructor should load localization functionality and initiate the plugin. The init process should check for basic requirements and then then run the plugin logic. Note that If one of the basic plugin requirements fails the plugin logic won’t run."
    },
    "el_main_version_elementor": {
		"prefix": "el_main_version_elementor",
		"body": [
            "const MINIMUM_ELEMENTOR_VERSION = '${3:1.0.0}';",
            "",
            "public function init() {",
            "",
                "// Check for required Elementor version",
                "if ( ! version_compare( ELEMENTOR_VERSION, self::MINIMUM_ELEMENTOR_VERSION, '>=' ) ) {",
                    "add_action( 'admin_notices', [ $this, 'admin_notice_minimum_elementor_version' ] );",
                    "return;",
                "}",
            "",
            "}",
            "",
            "public function admin_notice_minimum_elementor_version() {",
            "",
                "if ( isset( $_GET['activate'] ) ) unset( $_GET['activate'] );",
            "",
                "$message = sprintf(",
                    "/* translators: 1: Plugin name 2: Elementor 3: Required Elementor version */",
                    "esc_html__( '\"%1$s\" requires \"%2$s\" version %3$s or greater.', '${5:elementor-test-extension}' ),",
                    "'<strong>' . esc_html__( '${3:Elementor Test Extension}', '${5:elementor-test-extension}' ) . '</strong>',",
                    "'<strong>' . esc_html__( '${4:Elementor}', '${5:elementor-test-extension}' ) . '</strong>',",
                    "self::MINIMUM_ELEMENTOR_VERSION",
                ");",
            "",
                "printf( '<div class=\"notice notice-warning is-dismissible\"><p>%1$s</p></div>', $message );",
            "",
            "}"
		],
		"description": "The constructor should load localization functionality and initiate the plugin. The init process should check for basic requirements and then then run the plugin logic. Note that If one of the basic plugin requirements fails the plugin logic won’t run."
    },
    "el_main_php_version_elementor": {
		"prefix": "el_main_php_version_elementor",
		"body": [
            "const MINIMUM_PHP_VERSION = '${1:7.0}';",
            "",
            "public function init() {",
            "",
                "// Check for required PHP version",
                "if ( version_compare( PHP_VERSION, self::MINIMUM_PHP_VERSION, '<' ) ) {",
                    "add_action( 'admin_notices', [ $this, 'admin_notice_minimum_php_version' ] );",
                    "return;",
                "}",
            "",
            "}",
            "",
            "public function admin_notice_minimum_php_version() {",
            "",
                "if ( isset( $_GET['activate'] ) ) unset( $_GET['activate'] );",
            "",
                "$message = sprintf(",
                    "/* translators: 1: Plugin name 2: PHP 3: Required PHP version */",
                    "esc_html__( '\"%1$s\" requires \"%2$s\" version %3$s or greater.', 'elementor-test-extension' ),",
                    "'<strong>' . esc_html__( '${2:Elementor Test Extension}', '${6:elementor-test-extension}' ) . '</strong>',",
                    "'<strong>' . esc_html__( '${3:Elementor}', '${6:elementor-test-extension}' ) . '</strong>',",
                    "self::MINIMUM_PHP_VERSION",
                ");",
            "",
                "printf( '<div class=\"notice notice-warning is-dismissible\"><p>%1$s</p></div>', $message );",
            "",
            "}"
		],
		"description": "Elementor extensions should also check for minimum required PHP version. Keep in mind that Elementor has it’s own minimum required PHP version, the extension should use a greater PHP version than the one Elementor is using. You need to check the minimum required PHP version before loading the main functionality."
    },
    "el_main_if_elementor": {
		"prefix": "el_main_if_elementor",
		"body": [
            "public function init() {",
            "",
                "// Check if Elementor installed and activated",
                "if ( ! did_action( 'elementor/loaded' ) ) {",
                    "add_action( 'admin_notices', [ $this, 'admin_notice_missing_main_plugin' ] );",
                    "return;",
                "}",
            "",
            "}",
            "",
            "public function admin_notice_missing_main_plugin() {",
            "",
                "if ( isset( $_GET['activate'] ) ) unset( $_GET['activate'] );",
            "",
                "$message = sprintf(",
                    "/* translators: 1: Plugin name 2: Elementor */",
                    "esc_html__( '\"%1$s\" requires \"%2$s\" to be installed and activated.', '${3:elementor-test-extension}' ),",
                    "'<strong>' . esc_html__( '${1:Elementor Test Extension}', '${3:elementor-test-extension}' ) . '</strong>',",
                    "'<strong>' . esc_html__( '${2:Elementor}', '${3:elementor-test-extension}' ) . '</strong>'",
                ");",
            "",
                "printf( '<div class=\"notice notice-warning is-dismissible\"><p>%1$s</p></div>', $message );",
            "",
            "}"
		],
		"description": "As the extension extend Elementor functionality, it should check whether Elementor is installed and activated before loading the main functionality."
    },
    "el_main_add_styles": {
		"prefix": "el_main_add_styles",
		"body": [
            "public function init() {",
            "",
                "// Register Widget Styles",
                "add_action( 'elementor/frontend/after_enqueue_styles', [ $this, '${1:widget_styles}' ] );",
            "",
            "}",
            "",
            "public function ${1:widget_styles}() {",
            "",
                "wp_register_style( '${2:widget-1}', plugins_url( 'css/${2:widget-1}.css', __FILE__ ) );",
                "wp_register_style( '${3:widget-1}', plugins_url( 'css/${3:widget-1}.css', __FILE__ ) );",
            "",
            "}"
		],
		"description": "Registering Custom Styles: In some widgets we would like to register custom styles, this can be done with the elementor/frontend/after_enqueue_styles hook"
    },
    "el_main_add_scripts": {
		"prefix": "el_main_add_scripts",
		"body": [
            "public function init() {",
            "",
                "// Register Widget Scripts",
                "add_action( 'elementor/frontend/after_register_scripts', [ $this, '${1:widget_scripts}' ] );",
            "",
            "}",
            "",
            "public function ${1:widget_scripts}() {",
            "",
                "wp_register_script( '${2:widget-2}', plugins_url( 'js/libs/${2:widget-2}.js', __FILE__ ) );",
                "wp_register_script( '${3:widget-3}', plugins_url( 'js/${3:widget-3}.js', __FILE__ ) );",
                "wp_register_script( '${3:widget-4}', plugins_url( 'js/${3:widget-4}.js', __FILE__ ), [ 'jquery', '${2:widget-2}' ] );",
            "",
            "}"
		],
		"description": "Registering Custom Scripts. Other widgets need custom JS to run, in those cases we need to register scripts with the elementor/frontend/after_register_scripts hook"
    },
    "el_main_widgets_register": {
		"prefix": "el_main_widgets_register",
		"body": [
            "public function init() {",
            "",
                "// Include plugin files",
                "$this->includes();",
            "",
                "// Register widgets",
                "add_action( 'elementor/widgets/widgets_registered', [ $this, '${1:widget_scripts}' ]  );",
            "",
            "}",
            "",
            "public function includes() {",
            "",
                "require_once( __DIR__ . '/widgets/${2:test-widget-1}.php' );",
                "require_once( __DIR__ . '/widgets/${3:test-widget-2}.php' );",
            "",
            "}",
            "",
            "public function register_widgets() {",
            "",
                "\\Elementor\\Plugin::instance()->widgets_manager->register_widget_type( new \\${4:Elementor_Test_Widget1}() );",
                "\\Elementor\\Plugin::instance()->widgets_manager->register_widget_type( new \\${5:Elementor_Test_Widget2}() );",
            "",
            "}"
		],
		"description": "Registering New Widgets. To add a new widget to Elementor we need to register the widget class using the widget manager. It’s a pretty simple process, it is done using the elementor/widgets/widgets_registered action."
    }
    
}